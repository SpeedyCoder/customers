// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer.proto

package customers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IdRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdRequest) Reset()         { *m = IdRequest{} }
func (m *IdRequest) String() string { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()    {}
func (*IdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_f61947e7a7ed0a31, []int{0}
}
func (m *IdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdRequest.Unmarshal(m, b)
}
func (m *IdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdRequest.Marshal(b, m, deterministic)
}
func (dst *IdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdRequest.Merge(dst, src)
}
func (m *IdRequest) XXX_Size() int {
	return xxx_messageInfo_IdRequest.Size(m)
}
func (m *IdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdRequest proto.InternalMessageInfo

func (m *IdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListRequest struct {
	Offset               int64    `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_f61947e7a7ed0a31, []int{1}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (dst *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(dst, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Customer struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_f61947e7a7ed0a31, []int{2}
}
func (m *Customer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Customer.Unmarshal(m, b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
}
func (dst *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(dst, src)
}
func (m *Customer) XXX_Size() int {
	return xxx_messageInfo_Customer.Size(m)
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Customer) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Customer) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func init() {
	proto.RegisterType((*IdRequest)(nil), "customers.IdRequest")
	proto.RegisterType((*ListRequest)(nil), "customers.ListRequest")
	proto.RegisterType((*Customer)(nil), "customers.Customer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomersClient is the client API for Customers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomersClient interface {
	// Sends a greeting
	GetByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Customer, error)
	// Sends another greeting
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Customers_ListClient, error)
}

type customersClient struct {
	cc *grpc.ClientConn
}

func NewCustomersClient(cc *grpc.ClientConn) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) GetByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/customers.Customers/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Customers_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Customers_serviceDesc.Streams[0], "/customers.Customers/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &customersListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Customers_ListClient interface {
	Recv() (*Customer, error)
	grpc.ClientStream
}

type customersListClient struct {
	grpc.ClientStream
}

func (x *customersListClient) Recv() (*Customer, error) {
	m := new(Customer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomersServer is the server API for Customers service.
type CustomersServer interface {
	// Sends a greeting
	GetByID(context.Context, *IdRequest) (*Customer, error)
	// Sends another greeting
	List(*ListRequest, Customers_ListServer) error
}

func RegisterCustomersServer(s *grpc.Server, srv CustomersServer) {
	s.RegisterService(&_Customers_serviceDesc, srv)
}

func _Customers_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customers.Customers/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetByID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomersServer).List(m, &customersListServer{stream})
}

type Customers_ListServer interface {
	Send(*Customer) error
	grpc.ServerStream
}

type customersListServer struct {
	grpc.ServerStream
}

func (x *customersListServer) Send(m *Customer) error {
	return x.ServerStream.SendMsg(m)
}

var _Customers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customers.Customers",
	HandlerType: (*CustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _Customers_GetByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Customers_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customer.proto",
}

func init() { proto.RegisterFile("customer.proto", fileDescriptor_customer_f61947e7a7ed0a31) }

var fileDescriptor_customer_f61947e7a7ed0a31 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2e, 0x2d, 0x2e,
	0xc9, 0xcf, 0x4d, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xf1, 0x8b, 0x95,
	0xa4, 0xb9, 0x38, 0x3d, 0x53, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98,
	0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0x98, 0x3c, 0x53, 0x94, 0xac, 0xb9, 0xb8,
	0x7d, 0x32, 0x8b, 0x4b, 0x60, 0xd2, 0x62, 0x5c, 0x6c, 0xfe, 0x69, 0x69, 0xc5, 0xa9, 0x25, 0x60,
	0x25, 0xcc, 0x41, 0x50, 0x9e, 0x90, 0x08, 0x17, 0xab, 0x4f, 0x66, 0x6e, 0x66, 0x89, 0x04, 0x13,
	0x58, 0x18, 0xc2, 0x51, 0x0a, 0xe1, 0xe2, 0x70, 0x86, 0x5a, 0x83, 0x6e, 0xb0, 0x90, 0x0c, 0x17,
	0xa7, 0x5b, 0x66, 0x51, 0x71, 0x89, 0x5f, 0x62, 0x6e, 0x2a, 0x58, 0x17, 0x67, 0x10, 0x42, 0x40,
	0x48, 0x8a, 0x8b, 0xc3, 0x27, 0x11, 0x2a, 0xc9, 0x0c, 0x96, 0x84, 0xf3, 0x8d, 0x6a, 0xb8, 0x38,
	0x61, 0xa6, 0x16, 0x0b, 0x99, 0x71, 0xb1, 0xbb, 0xa7, 0x96, 0x38, 0x55, 0x7a, 0xba, 0x08, 0x89,
	0xe8, 0xc1, 0xfd, 0xa4, 0x07, 0xf7, 0x90, 0x94, 0x30, 0x92, 0x28, 0x4c, 0x9b, 0x12, 0x83, 0x90,
	0x39, 0x17, 0x0b, 0xc8, 0x5f, 0x42, 0x62, 0x48, 0xd2, 0x48, 0x1e, 0xc5, 0xa1, 0xcd, 0x80, 0x31,
	0x89, 0x0d, 0x1c, 0x7e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0xd5, 0xf0, 0x09, 0x51,
	0x01, 0x00, 0x00,
}
